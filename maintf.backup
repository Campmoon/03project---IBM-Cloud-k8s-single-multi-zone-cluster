# Create an Terraform on IBM Cloud configuration file for your single zone cluster. 

# The following example creates a single zone cluster in the dal10 zone with a default worker pool that consists of 3 worker nodes that are connected to a private and public VLAN in dal10.

# https://cloud.ibm.com/docs/ibm-cloud-provider-for-terraform?topic=ibm-cloud-provider-for-terraform-tutorial-tf-clusters

data ibm_resource_group "resource_group" {
    name = "default"
}
resource ibm_container_cluster "tfcluster" {
name            = "tfclusterdoc"
datacenter      = "dal10"
machine_type    = "b3c.4x16"
hardware        = "shared"
public_vlan_id  = "2234945"
private_vlan_id = "2234947"

kube_version = "1.21.9"

default_pool_size = 3
    
public_service_endpoint  = "true"
private_service_endpoint = "true"

resource_group_id = data.ibm_resource_group.resource_group.id
}

# Add zones to the default worker pool in your cluster that you created in step 1. By adding zones, the same number of worker nodes that you created in step 2 are spread across these zones converting your single zone cluster into a multizone cluster.

resource "ibm_container_worker_pool_zone_attachment" "dal12" {
cluster         = ibm_container_cluster.tfcluster.id
worker_pool     = ibm_container_cluster.tfcluster.worker_pools.0.id
zone            = "dal12"
private_vlan_id = "<private_vlan_ID_dal12>"
public_vlan_id  = "<public_vlan_ID_dal12>"
resource_group_id = data.ibm_resource_group.resource_group.id
}

resource "ibm_container_worker_pool_zone_attachment" "dal13" {
cluster         = ibm_container_cluster.tfcluster.id
worker_pool     = ibm_container_cluster.tfcluster.worker_pools.0.id
zone            = "dal13"
private_vlan_id = "<private_vlan_ID_dal13>"
public_vlan_id  = "<public_vlan_ID_dal13>"
resource_group_id = data.ibm_resource_group.resource_group.id
}

# Open your existing Terraform on IBM Cloud configuration file and add the following content to your configuration. The ibm_container_worker_pool resource creates a worker pool in your cluster with a size of two worker nodes per zone that you want. To start creating the worker nodes in each zone, you must add an ibm_container_worker_pool_zone_attachment resource for every zone where you want to create worker nodes.

resource "ibm_container_worker_pool" "workerpool" {
    worker_pool_name = "tf-workerpool"
    machine_type     = "u3c.2x4"
    cluster          = ibm_container_cluster.tfcluster.id
    size_per_zone    = 2
    hardware         = "shared"

    resource_group_id = data.ibm_resource_group.resource_group.id
}

resource "ibm_container_worker_pool_zone_attachment" "tfwp-dal10" {
cluster         = ibm_container_cluster.tfcluster.id
worker_pool     = element(split("/",ibm_container_worker_pool.workerpool.id),1)
zone            = "dal10"
private_vlan_id = "<private_vlan_ID_dal10>"
public_vlan_id  = "<public_vlan_ID_dal10>"
resource_group_id = data.ibm_resource_group.resource_group.id
}

# Remove the ibm_container_worker_pool_zone_attachment resources that you added for the default worker pool from your Terraform on IBM Cloud configuration file. This step is important so that these resources are not added to your cluster again when you run the next terraform apply command. To remove these resources, you can remove the code from your file or use # to comment out each line. The following lines must be removed.

# resource "ibm_container_worker_pool_zone_attachment" "tfwp-dal12" {
# cluster         = ibm_container_cluster.tfcluster.id
# worker_pool     = element(split("/",ibm_container_worker_pool.workerpool.id),1)
# zone            = "dal12"
# private_vlan_id = "<private_vlan_ID_dal12>"
# public_vlan_id  = "<public_vlan_ID_dal12>"
# resource_group_id = data.ibm_resource_group.resource_group.id
# }

# resource "ibm_container_worker_pool_zone_attachment" "tfwp-dal13" {
# cluster         = ibm_container_cluster.tfcluster.id
# worker_pool     = element(split("/",ibm_container_worker_pool.workerpool.id),1)
# zone            = "dal13"
# private_vlan_id = "<private_vlan_ID_dal13>"
# public_vlan_id  = "<public_vlan_ID_dal13>"
# resource_group_id = data.ibm_resource_group.resource_group.id
# }

# Open your Terraform on IBM Cloud configuration and add the following content. To run a command against your cluster, you embed the local-exec provisioner in an Terraform on IBM Cloud null_resource.

resource "null_resource" "delete-default-worker-pool" {
    provisioner "local-exec" {
    command = "ibmcloud ks worker-pool rm --cluster ${ibm_container_cluster.tfcluster.id} --worker-pool ${ibm_container_cluster.tfcluster.worker_pools.0.id}"
    }
}

